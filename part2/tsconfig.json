{
  /*
    tsconfig.json是ts编译器的配置文件,ts编译器可以根据它的信息来对代码进行编译
    include 用来指定哪些TS文件需要被编译
      *任意文件 **任意目录
      exclude 不包含
  */ 
  "include": [
    "./src/**/*"
  ],
  // "exclude": [
  //   "./src/hello/**/*"
  // ],

  //编译器的选项
  "compilerOptions": {
    //用来指定ts被编译的ES的版本
    "target": "es6",
    //'--target' option must be: 'es3', 'es5', 'es6', 'es2015', 'es2016', 'es2017', 'es2018', 'es2019', 'es2020', 'es2021', 'es2022', 'esnext'.

    //指定要使用的模块化的规范(导入导出export import格式)
    "module": "System",
    //'--module' option must be: 'none', 'commonjs', 'amd', 'system', 'umd', 'es6', 'es2015', 'es2020', 'es2022', 'esnext', 'node16', 'nodenext'.

    //lib用来指定浏览器项目中要使用的库(一般不使用)
    // "lib": ["es6"]
    //'--lib' option must be: 'es5', 'es6', 'es2015', 'es7', 'es2016', 'es2017', 'es2018', 'es2019', 'es2020', 'es2021', 'es2022', 'esnext', 'dom', 'dom.iterable', 'webworker', 'webworker.importscripts', 'webworker.iterable', 'scripthost', 'es2015.core', 'es2015.collection', 'es2015.generator', 'es2015.iterable', 'es2015.promise', 'es2015.proxy', 'es2015.reflect', 'es2015.symbol', 'es2015.symbol.wellknown', 'es2016.array.include', 'es2017.object', 'es2017.sharedmemory', 'es2017.string', 'es2017.intl', 'es2017.typedarrays', 'es2018.asyncgenerator', 'es2018.asynciterable', 'es2018.intl', 'es2018.promise', 'es2018.regexp', 'es2019.array', 'es2019.object', 'es2019.string', 'es2019.symbol', 'es2019.intl', 'es2020.bigint', 'es2020.date', 'es2020.promise', 'es2020.sharedmemory', 'es2020.string', 'es2020.symbol.wellknown', 'es2020.intl', 'es2020.number', 'es2021.promise', 'es2021.string', 'es2021.weakref', 'es2021.intl', 'es2022.array', 'es2022.error', 'es2022.intl', 'es2022.object', 'es2022.sharedmemory', 'es2022.string', 'esnext.array', 'esnext.symbol', 'esnext.asynciterable', 'esnext.intl', 'esnext.bigint', 'esnext.string', 'esnext.promise', 'esnext.weakref'.

    //outDir 用来指定编译后的输出文件位置(地址)
    "outDir": "./dist",

    //outFile 将编译后的文件中的代码合并为一个文件(打包输出为一个入口文件)
    //设置outFile后,所有的全局作用域中的代码会合并到同一个文件中
    "outFile": "./dist/App.js",


    //是否对js文件进行编译,默认是false (要么都用,要么都不用)
    "allowJs": false,
    //是否检查js代码是否符合规范,默认是false
    "checkJs": false,

    //是否移除注释
    "removeComments": true,

    //不生成编译后的文件(只用来检查语法)
    // "noEmit": true

    //当有错误时不生成编译后的文件
    "noEmitOnError": false,


    //所有严格检查的总开关(它开启之后下方所有的都开启)
    "strict": false,

    //严格模式,用来设置编译后的文件是否使用严格模式,默认false 在引入模块的js文件中已经使用了严格模式 就不用开启了
    "alwaysStrict": true,

    //在ts中 不指定类型的时候 默认为any (一旦使用了any ts中的类型检查全部失效 不推荐使用)
    //不允许使用隐式any
    "noImplicitAny": true,

    //不允许不明确类型的this
    "noImplicitThis": true,

    //严格的检查空值
    "strictNullChecks": true,
    
















  }
}